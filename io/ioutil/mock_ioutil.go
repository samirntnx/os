// Code generated by MockGen. DO NOT EDIT.
// Source: io/ioutil/ioutil.go

// Package ioutil is a generated GoMock package.
package ioutil

import (
	io "io"
	fs "io/fs"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockany is a mock of any interface.
type Mockany struct {
	ctrl     *gomock.Controller
	recorder *MockanyMockRecorder
}

// MockanyMockRecorder is the mock recorder for Mockany.
type MockanyMockRecorder struct {
	mock *Mockany
}

// NewMockany creates a new mock instance.
func NewMockany(ctrl *gomock.Controller) *Mockany {
	mock := &Mockany{ctrl: ctrl}
	mock.recorder = &MockanyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockany) EXPECT() *MockanyMockRecorder {
	return m.recorder
}

// MockIoutilInterface is a mock of IoutilInterface interface.
type MockIoutilInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIoutilInterfaceMockRecorder
}

// MockIoutilInterfaceMockRecorder is the mock recorder for MockIoutilInterface.
type MockIoutilInterfaceMockRecorder struct {
	mock *MockIoutilInterface
}

// NewMockIoutilInterface creates a new mock instance.
func NewMockIoutilInterface(ctrl *gomock.Controller) *MockIoutilInterface {
	mock := &MockIoutilInterface{ctrl: ctrl}
	mock.recorder = &MockIoutilInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIoutilInterface) EXPECT() *MockIoutilInterfaceMockRecorder {
	return m.recorder
}

// NopCloser mocks base method.
func (m *MockIoutilInterface) NopCloser(r io.Reader) io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NopCloser", r)
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// NopCloser indicates an expected call of NopCloser.
func (mr *MockIoutilInterfaceMockRecorder) NopCloser(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NopCloser", reflect.TypeOf((*MockIoutilInterface)(nil).NopCloser), r)
}

// ReadAll mocks base method.
func (m *MockIoutilInterface) ReadAll(r io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", r)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockIoutilInterfaceMockRecorder) ReadAll(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockIoutilInterface)(nil).ReadAll), r)
}

// ReadDir mocks base method.
func (m *MockIoutilInterface) ReadDir(dirname string) ([]fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", dirname)
	ret0, _ := ret[0].([]fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockIoutilInterfaceMockRecorder) ReadDir(dirname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockIoutilInterface)(nil).ReadDir), dirname)
}

// ReadFile mocks base method.
func (m *MockIoutilInterface) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockIoutilInterfaceMockRecorder) ReadFile(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockIoutilInterface)(nil).ReadFile), filename)
}

// TempDir mocks base method.
func (m *MockIoutilInterface) TempDir(dir, pattern string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDir", dir, pattern)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempDir indicates an expected call of TempDir.
func (mr *MockIoutilInterfaceMockRecorder) TempDir(dir, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDir", reflect.TypeOf((*MockIoutilInterface)(nil).TempDir), dir, pattern)
}

// TempFile mocks base method.
func (m *MockIoutilInterface) TempFile(dir, pattern string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempFile", dir, pattern)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFile indicates an expected call of TempFile.
func (mr *MockIoutilInterfaceMockRecorder) TempFile(dir, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempFile", reflect.TypeOf((*MockIoutilInterface)(nil).TempFile), dir, pattern)
}

// WriteFile mocks base method.
func (m *MockIoutilInterface) WriteFile(filename string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockIoutilInterfaceMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockIoutilInterface)(nil).WriteFile), filename, data, perm)
}
